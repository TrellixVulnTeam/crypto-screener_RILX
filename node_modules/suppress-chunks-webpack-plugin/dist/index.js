"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var SuppressEntryChunksPlugin =
/*#__PURE__*/
function () {
  function SuppressEntryChunksPlugin(files) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      filter: null,
      keep: false
    },
        filter = _ref.filter,
        keep = _ref.keep;

    _classCallCheck(this, SuppressEntryChunksPlugin);

    var fileList = Array.isArray(files) ? files : [files];
    this.filter = filter;
    this.files = fileList.map(function (file) {
      if (typeof file === 'string') {
        return {
          name: file,
          match: null,
          keep: false
        };
      }

      return _objectSpread({
        match: null,
        keep: false
      }, file);
    });
    this.keep = keep;
  }

  _createClass(SuppressEntryChunksPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      compiler.hooks.emit.tapAsync(this.constructor.name, function (compilation, callback) {
        compilation.chunks.forEach(function (chunk) {
          if (_this.files.map(function (file) {
            return file.name;
          }).includes(chunk.name)) {
            var _this$files$find = _this.files.find(function (f) {
              return f.name === chunk.name;
            }),
                match = _this$files$find.match,
                keep = _this$files$find.keep;

            chunk.files.filter(function (file) {
              if (match !== null) {
                var regexp = new RegExp(match);
                return keep ? !regexp.test(file) : regexp.test(file);
              } else if (_this.filter !== null) {
                var _regexp = new RegExp(_this.filter);

                return _this.keep ? !_regexp.test(file) : _regexp.test(file);
              }

              return true;
            }).forEach(function (file) {
              // eslint-disable-next-line no-param-reassign
              chunk.files = chunk.files.filter(function (f) {
                return f !== file;
              }); // eslint-disable-next-line no-param-reassign

              delete compilation.assets[file];
            });
          }
        });
        callback();
      });
    }
  }]);

  return SuppressEntryChunksPlugin;
}();

exports["default"] = SuppressEntryChunksPlugin;